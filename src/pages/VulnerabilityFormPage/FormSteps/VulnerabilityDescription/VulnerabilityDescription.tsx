import { useCallback, useContext, useEffect, useState } from "react";
import MDEditor from "@uiw/react-md-editor";
import download from "downloadjs";
import classNames from "classnames";
import { useVaults } from "hooks/vaults/useVaults";
import { Colors } from "constants/constants";
import { encryptWithKeys } from "pages/VulnerabilityFormPage/encrypt";
import { VulnerabilityFormContext } from "pages/VulnerabilityFormPage/store";
import "styles/Vulnerability/Description.scss";

export default function VulnerabilityDescription() {
  const { vulnerabilityData, setVulnerabilityData } = useContext(VulnerabilityFormContext);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const { vaults } = useVaults();
  const vault = vaults?.find((vault) => vault.id === vulnerabilityData?.project?.projectId)!;

  const editorStyles = {
    color: Colors.white,
  };

  useEffect(() => {
    setTitle(vulnerabilityData?.description?.title || "");
    setDescription(vulnerabilityData?.description?.description || "");
  }, [vulnerabilityData]);

  const handleSaveDescription = useCallback(async () => {
    let keyOrKeys: string | string[];

    if (vault.version === "v1") {
      keyOrKeys = vault.description?.["communication-channel"]?.["pgp-pk"] ?? [];
    } else {
      keyOrKeys =
        vault.description?.committee.members.reduce(
          (prev: string[], curr) => [...prev, ...curr["pgp-keys"].map((key) => key.publicKey)],
          []
        ) ?? [];
    }

    keyOrKeys = typeof keyOrKeys === "string" ? keyOrKeys : keyOrKeys.filter((key) => !!key);

    if (keyOrKeys.length === 0) return;

    const textToDownload = `
    **Project Name:** ${vulnerabilityData?.project?.projectName}
    **Title:** ${title}
    **Description:** ${description}
    **Telegram username:** ${vulnerabilityData?.contact?.username}  
    **Beneficiary:** ${vulnerabilityData?.contact?.beneficiary}
    `;
    const { encryptedData, sessionKey } = await encryptWithKeys(keyOrKeys, textToDownload);
    download(JSON.stringify({ text: textToDownload, sessionKey }), `${title}.json`);
    setVulnerabilityData((prev) => {
      if (!prev || !title || !description) return prev;
      return {
        ...prev,
        description: {
          verified: true,
          title,
          description,
          encryptedData: encryptedData as string,
          sessionKey,
        },
      };
    });
  }, [vulnerabilityData, description, title, vault, setVulnerabilityData]);

  return (
    <div className="description-wrapper">
      <input
        className={classNames({ "input-error": title === "" })}
        autoFocus
        type="text"
        placeholder="Title"
        onChange={(e) => setTitle(e.target.value)}
        value={title}
      />
      <MDEditor
        className={classNames({ "input-error": description === "" })}
        style={editorStyles}
        value={description}
        previewOptions={{ disallowedElements: ["script", "iframe"] }}
        onChange={(value) => setDescription(value!)}
      />

      <button className="save-and-download-btn" disabled={title === "" || description === ""} onClick={handleSaveDescription}>
        SAVE AND DOWNLOAD
      </button>
    </div>
  );
}
