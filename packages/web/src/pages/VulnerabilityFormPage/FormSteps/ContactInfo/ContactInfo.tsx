import { yupResolver } from "@hookform/resolvers/yup";
import { Button, FormInput, FormRadioInput } from "components";
import { useEnhancedForm } from "hooks/form";
import { useContext, useEffect } from "react";
import { useWatch } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { useAccount } from "wagmi";
import { VulnerabilityFormContext } from "../../store";
import { ISubmissionContactData } from "../../types";
import { getCreateContactInfoSchema } from "./formSchema";
import { StyledContactInfo } from "./styles";

export default function ContactInfo() {
  const { t } = useTranslation();
  const { address: account } = useAccount();
  const { vulnerabilityData, setVulnerabilityData } = useContext(VulnerabilityFormContext);

  const {
    register,
    getValues,
    setValue,
    reset,
    handleSubmit,
    control,
    trigger,
    formState: { isValid },
  } = useEnhancedForm<ISubmissionContactData>({
    resolver: yupResolver(getCreateContactInfoSchema(t)),
    mode: "onChange",
    defaultValues: { communicationChannelType: "discord" },
  });

  const communicationChannelType = useWatch({ control, name: "communicationChannelType" });
  useEffect(() => {
    const { communicationChannel } = getValues();
    if (communicationChannel) trigger("communicationChannel");
  }, [communicationChannelType, trigger, getValues]);

  // Reset form with saved data
  useEffect(() => {
    if (vulnerabilityData?.contact) reset(vulnerabilityData?.contact);
  }, [vulnerabilityData, reset]);

  // Change beneficiary to current account (only if not set yet)
  useEffect(() => {
    const { beneficiary: currentBeneficiary } = getValues();
    if (!currentBeneficiary && account) setValue("beneficiary", account);
  }, [account, setValue, getValues]);

  const handleAddContactData = (contactData: ISubmissionContactData) => {
    setVulnerabilityData((prev) => {
      if (prev) return { ...prev!, contact: { ...contactData, verified: true } };
    });
  };

  return (
    <StyledContactInfo>
      <p className="mb-2">{t("Submissions.addBeneficiaryAddress")}</p>
      <p className="mb-4">{t("Submissions.beneficiaryAddressNote")}</p>

      <FormInput
        {...register("beneficiary")}
        label={`${t("beneficiaryWalletAddress")}`}
        placeholder={t("beneficiaryWalletAddressPlaceholder")}
        colorable
      />

      <FormRadioInput
        {...register("communicationChannelType")}
        label={t("Submissions.addPreferredCommunicationChannel")}
        colorable
        radioOptions={[
          { label: t("discord"), value: "discord" },
          { label: t("emailAddress"), value: "email" },
          { label: t("telegram"), value: "telegram" },
        ]}
      />

      <FormInput
        {...register("communicationChannel")}
        label={`${t("beneficiaryWalletAddress")}`}
        placeholder={t("beneficiaryWalletAddressPlaceholder")}
        colorable
      />

      <p className="mb-2">{t("Submissions.addGithubAccountConnectIssue")}</p>
      <FormInput
        {...register("githubUsername")}
        label={`${t("githubUsername")}`}
        placeholder={t("githubUsernamePlaceholder")}
        colorable
      />
      <p className="mb-5">{t("Submissions.contactDataWillBePublishedNote")}</p>

      <div className="buttons">
        <Button disabled={!isValid} onClick={handleSubmit(handleAddContactData)}>
          {t("Submissions.saveContactInformation")}
        </Button>
      </div>
    </StyledContactInfo>
  );
}
