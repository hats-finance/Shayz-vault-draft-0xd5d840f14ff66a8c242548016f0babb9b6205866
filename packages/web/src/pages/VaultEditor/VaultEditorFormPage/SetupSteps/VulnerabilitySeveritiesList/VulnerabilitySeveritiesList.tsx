import { useContext } from "react";
import { useFieldArray, useWatch } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { useEnhancedFormContext } from "hooks/form/useEnhancedFormContext";
import { Button, FormInput } from "components";
import { IEditedVaultDescription } from "types";
import VulnerabilitySeverityForm from "./VulnerabilitySeverityForm/VulnerabilitySeverityForm";
import { createNewVulnerabilitySeverity } from "@hats-finance/shared";
import { StyledVulnerabilitySeveritiesList } from "./styles";
import { VaultEditorFormContext } from "../../store";
import AddIcon from "@mui/icons-material/Add";

export function VulnerabilitySeveritiesList() {
  const { t } = useTranslation();
  const { control, register } = useEnhancedFormContext<IEditedVaultDescription>();
  const { fields: severities, append, remove } = useFieldArray({ control, name: "vulnerability-severities-spec.severities" });

  const isV1 = useWatch({ control, name: "version" }) === "v1";

  const { isEditingExitingVault, allFormDisabled } = useContext(VaultEditorFormContext);

  return (
    <StyledVulnerabilitySeveritiesList>
      <div className="helper-text" dangerouslySetInnerHTML={{ __html: t("vaultEditorSeveritiesExplanation") }} />

      <p className="helper">{t("setMaxBountyHelper")}:</p>
      <div className="maxBounty">
        <FormInput
          {...register(`parameters.maxBountyPercentage`)}
          disabled={isEditingExitingVault || allFormDisabled}
          type="whole-number"
          label={t("VaultEditor.vault-parameters.maxBountyPercentage")}
          placeholder={t("VaultEditor.vault-parameters.maxBountyPercentage-placeholder")}
          colorable
        />
      </div>

      {isV1 && (
        <div>
          <FormInput
            {...register(`vulnerability-severities-spec.indexArray`)}
            disabled={allFormDisabled}
            label={t("VaultEditor.severities-index-array")}
            colorable
            placeholder={t("VaultEditor.severities-index-array-placeholder")}
          />
        </div>
      )}

      {severities.map((severity, index) => (
        <VulnerabilitySeverityForm key={severity.id} index={index} remove={remove} severitiesCount={severities.length} />
      ))}

      {!allFormDisabled && (
        <Button styleType="invisible" onClick={() => append(createNewVulnerabilitySeverity(isV1 ? "v1" : "v2"))}>
          <AddIcon className="mr-1" />
          <span>{t("addSeverity")}</span>
        </Button>
      )}
    </StyledVulnerabilitySeveritiesList>
  );
}
