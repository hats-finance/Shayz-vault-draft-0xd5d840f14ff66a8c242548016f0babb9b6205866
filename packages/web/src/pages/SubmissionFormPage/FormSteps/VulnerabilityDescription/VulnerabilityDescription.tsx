import { IVulnerabilitySeverityV1, IVulnerabilitySeverityV2 } from "@hats-finance/shared";
import { yupResolver } from "@hookform/resolvers/yup";
import { Button, FormInput, FormMDEditor, FormSelectInput, FormSelectInputOption, FormSupportFilesInput } from "components";
import download from "downloadjs";
import { getCustomIsDirty, useEnhancedForm } from "hooks/form";
import { useVaults } from "hooks/vaults/useVaults";
import { encryptWithKeys } from "pages/SubmissionFormPage/encrypt";
import { SubmissionFormContext } from "pages/SubmissionFormPage/store";
import { ISubmissionDescriptionData } from "pages/SubmissionFormPage/types";
import { useContext, useEffect, useState } from "react";
import { Controller } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { BASE_SERVICE_URL } from "settings";
import { getCreateDescriptionSchema } from "./formSchema";
import { StyledVulnerabilityDescription } from "./styles";

export default function VulnerabilityDescription() {
  const { t } = useTranslation();
  const { vaults } = useVaults();

  const { submissionData, setSubmissionData } = useContext(SubmissionFormContext);

  const [severitiesOptions, setSeveritiesOptions] = useState<FormSelectInputOption[] | undefined>();
  const vault = vaults?.find((vault) => vault.id === submissionData?.project?.projectId);

  const {
    register,
    handleSubmit,
    control,
    reset,
    getValues,
    formState: { isValid },
  } = useEnhancedForm<ISubmissionDescriptionData>({
    resolver: yupResolver(getCreateDescriptionSchema(t)),
    mode: "onChange",
  });

  console.log(getValues().files);

  // Reset form with saved data
  useEffect(() => {
    if (submissionData?.description) reset(submissionData.description);
  }, [submissionData, reset]);

  // Get severities information
  useEffect(() => {
    if (!vault || !vault.description) return;

    if (vault.description) {
      const severities = vault.description.severities.map((severity: IVulnerabilitySeverityV1 | IVulnerabilitySeverityV2) => ({
        label: severity.name.toLowerCase().replace("severity", "").trim(),
        value: severity.name.toLowerCase(),
      }));

      setSeveritiesOptions(severities);
    }
  }, [vault, t]);

  const handleSaveAndDownloadDescription = async (formData: ISubmissionDescriptionData) => {
    if (!vault) return;
    if (!submissionData) return alert("Please fill previous steps first.");

    let keyOrKeys: string | string[];

    // Get public keys from vault description
    if (vault.version === "v1") {
      keyOrKeys = vault.description?.["communication-channel"]?.["pgp-pk"] ?? [];
    } else {
      keyOrKeys =
        vault.description?.committee.members.reduce(
          (prev: string[], curr) => [...prev, ...curr["pgp-keys"].map((key) => key.publicKey)],
          []
        ) ?? [];
    }

    keyOrKeys = typeof keyOrKeys === "string" ? keyOrKeys : keyOrKeys.filter((key) => !!key);
    if (keyOrKeys.length === 0) return alert("This project has no keys to encrypt the description. Please contact HATS team.");

    const submissionText = `
    **Project Name:** ${submissionData.project?.projectName}
    **Project Id:** ${submissionData.project?.projectId}
    **Beneficiary:** ${submissionData.contact?.beneficiary}
    **Communication channel:** ${submissionData.contact?.communicationChannel} (${
      submissionData.contact?.communicationChannelType
    })
    
    **Title:** ${formData.title}
    **Severity:** ${formData.severity}
    **Description:** ${formData.description}
    **Files:** 
      ${formData.files.map((file) => `- ${file.name} (${BASE_SERVICE_URL}/files/${file.ipfsHash})`).join("\n")}
    `;

    const { encryptedData, sessionKey } = await encryptWithKeys(keyOrKeys, submissionText);
    download(JSON.stringify({ text: submissionText, sessionKey }), `${formData.title}.json`);

    setSubmissionData((prev) => {
      if (!prev) return prev;
      return {
        ...prev,
        description: {
          verified: true,
          title: formData.title,
          severity: formData.severity,
          description: formData.description,
          files: formData.files,
          encryptedData: encryptedData as string,
          sessionKey,
        },
      };
    });
  };

  return (
    <StyledVulnerabilityDescription>
      <p className="bold mb-2">{t("submission")} #1</p>
      <p className="mb-4">{t("Submissions.provideExplanation")}</p>

      <div className="row">
        <FormInput
          {...register("title")}
          label={`${t("Submissions.submissionTitle")}`}
          placeholder={t("Submissions.submissionTitlePlaceholder")}
          colorable
        />
        <Controller
          control={control}
          name={`severity`}
          render={({ field, fieldState: { error }, formState: { dirtyFields, defaultValues } }) => (
            <FormSelectInput
              isDirty={getCustomIsDirty<ISubmissionDescriptionData>(field.name, dirtyFields, defaultValues)}
              error={error}
              label={t("severity")}
              placeholder={t("severityPlaceholder")}
              colorable
              options={severitiesOptions ?? []}
              {...field}
            />
          )}
        />
      </div>

      <Controller
        control={control}
        name={`description`}
        render={({ field, fieldState: { error }, formState: { dirtyFields, defaultValues } }) => (
          <FormMDEditor
            isDirty={getCustomIsDirty<ISubmissionDescriptionData>(field.name, dirtyFields, defaultValues)}
            error={error}
            colorable
            {...field}
          />
        )}
      />

      <Controller
        control={control}
        name={`files`}
        render={({ field, fieldState: { error }, formState: { dirtyFields, defaultValues } }) => (
          <FormSupportFilesInput
            label={t("Submissions.selectSupportFiles")}
            isDirty={getCustomIsDirty<ISubmissionDescriptionData>(field.name, dirtyFields, defaultValues)}
            error={error}
            colorable
            {...field}
          />
        )}
      />

      <div className="buttons mt-5">
        <Button disabled={!isValid} onClick={handleSubmit(handleSaveAndDownloadDescription)}>
          {t("Submissions.saveAndDownload")}
        </Button>
      </div>
    </StyledVulnerabilityDescription>
  );
}
